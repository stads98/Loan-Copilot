root@srv741469:/opt/loan-copilot# docker-compose exec postgres psql -U loanuser -d loancopilot -c "SELECT id, username, password, email FROM users;"
 id |     username      |    password     |       email
----+-------------------+-----------------+-------------------
  1 | stads98@gmail.com | Adlercapital!!! | stads98@gmail.com
(1 row)

root@srv741469:/opt/loan-copilot# docker-compose logs app | tail -20
loan-copilot-app-1  | OpenAI configuration: API key is set
loan-copilot-app-1  | Loan Processing Co-Pilot running on port 5000
loan-copilot-app-1  | Environment: production
loan-copilot-app-1  | Database: Connected
root@srv741469:/opt/loan-copilot# curl -v http://localhost:5000/api/auth/login 2>&1 | grep -E "(HTTP|POST|Content)"
> GET /api/auth/login HTTP/1.1
< HTTP/1.1 200 OK
< Content-Type: text/html; charset=utf-8
< Content-Length: 1099
root@srv741469:/opt/loan-copilot# docker-compose exec postgres psql -U loanuser -d loancopilot -c "UPDATE users SET password = 'password123' WHERE username = 'stads98@gmail.com';"
UPDATE 1
root@srv741469:/opt/loan-copilot# curl -X POST http://localhost:5000/api/auth/login \
>   -H "Content-Type: application/json" \
>   -d '{"username": "stads98@gmail.com", "password": "password123"}'
Bad Requestroot@srv741469:/opt/loan-copilot# curl -X POST http://localhost:5000/api/auth/login \
>   -H "Content-Type: application/json" \
>   -d '{"email": "stads98@gmail.com", "password": "password123"}'
Bad Requestroot@srv741469:/opt/loan-copilot# docker-compose exec postgres psql -U loanuser -d loancopilot -c "SELECT id, username, password, email FROM users;"
 id |     username      |  password   |       email
----+-------------------+-------------+-------------------
  1 | stads98@gmail.com | password123 | stads98@gmail.com
(1 row)

root@srv741469:/opt/loan-copilot# docker-compose exec app npx tsx -e "
> import { registerRoutes } from './server/routes.js';
> import express from 'express';
> const app = express();
> registerRoutes(app).then(() => {
>   console.log('Routes registered successfully');
>   console.log('App routes:', app._router.stack.filter(r => r.route).map(r => r.route.path));
> }).catch(console.error);
> "
/app/node_modules/tsx/dist/register-BXA4IaYH.cjs:3
`)},"createLog"),x=I(g.bgLightYellow(g.black(" CJS "))),re=I(g.bgBlue(" ESM ")),ae=[".cts",".mts",".ts",".tsx",".jsx"],oe=[".js",".cjs",".mjs"],k=[".ts",".tsx",".jsx"],U=o((s,e,r,n)=>{const t=Object.getOwnPropertyDescriptor(s,e);t?.set?s[e]=r:(!t||t.configurable)&&Object.defineProperty(s,e,{value:r,enumerable:t?.enumerable||n?.enumerable,writable:n?.writable??(t?t.writable:!0),configurable:n?.configurable??(t?t.configurable:!0)})},"safeSet"),ce=o((s,e,r)=>{const n=e[".js"],t=o((a,c)=>{if(s.enabled===!1)return n(a,c);const[i,f]=c.split("?");if((new URLSearchParams(f).get("namespace")??void 0)!==r)return n(a,c);x("load",{filePath:c}),a.id.startsWith("data:text/javascript,")&&(a.path=d.dirname(i)),W.parent?.send&&W.parent.send({type:"dependency",path:i});const u=ae.some(h=>i.endsWith(h)),P=oe.some(h=>i.endsWith(h));if(!u&&!P)return n(a,i);let m=R.readFileSync(i,"utf8");if(i.endsWith(".cjs")){const h=S.transformDynamicImport(c,m);h&&(m=A()?F(h):h.code)}else if(u||S.isESM(m)){const h=S.transformSync(m,c,{tsconfigRaw:exports.fileMatcher?.(i)});m=A()?F(h):h.code}x("loaded",{filePath:i}),a._compile(m,i)},"transformer");U(e,".js",t);for(const a of k)U(e,a,t,{enumerable:!r,writable:!0,configurable:!0});return U(e,".mjs",t,{writable:!0,configurable:!0}),()=>{e[".js"]===t&&(e[".js"]=n);for(const a of[...k,".mjs"])e[a]===t&&delete e[a]}},"createExtensions"),ie=o(s=>e=>{if((e==="."||e===".."||e.endsWith("/.."))&&(e+="/"),_.test(e)){let r=d.join(e,"index.js");e.startsWith("./")&&(r=`./${r}`);try{return s(r)}catch{}}try{return s(e)}catch(r){const n=r;if(n.code==="MODULE_NOT_FOUND")try{return s(`${e}${d.sep}index.js`)}catch{}throw n}},"createImplicitResolver"),B=[".js",".json"],G=[".ts",".tsx",".jsx"],le=[...G,...B],fe=[...B,...G],y=Object.create(null);y[".js"]=[".ts",".tsx",".js",".jsx"],y[".jsx"]=[".tsx",".ts",".jsx",".js"],y[".cjs"]=[".cts"],y[".mjs"]=[".mts"];const X=o(s=>{const e=s.split("?"),r=e[1]?`?${e[1]}`:"",[n]=e,t=d.extname(n),a=[],c=y[t];if(c){const f=n.slice(0,-t.length);a.push(...c.map(l=>f+l+r))}const i=!(s.startsWith(v)||j(n))||n.includes(w)||n.includes("/node_modules/")?fe:le;return a.push(...i.map(f=>n+f+r)),a},"mapTsExtensions"),M=o((s,e,r)=>{if(x("resolveTsFilename",{request:e,isDirectory:_.test(e),isTsParent:r,allowJs:exports.allowJs}),_.test(e)||!r&&!exports.allowJs)return;const n=X(e);if(n)for(const t of n)try{return s(t)}catch(a){const{code:c}=a;if(c!=="MODULE_NOT_FOUND"&&c!=="ERR_PACKAGE_PATH_NOT_EXPORTED")throw a}},"resolveTsFilename"),he=o((s,e)=>r=>{if(x("resolveTsFilename",{request:r,isTsParent:e,isFilePath:j(r)}),j(r)){const n=M(s,r,e);if(n)return n}try{return s(r)}catch(n){const t=n;if(t.code==="MODULE_NOT_FOUND"){if(t.path){const c=t.message.match(/^Cannot find module '([^']+)'$/);if(c){const f=c[1],l=M(s,f,e);if(l)return l}const i=t.message.match(/^Cannot find module '([^']+)'. Please verify that the package.json has a valid "main" entry$/);if(i){const f=i[1],l=M(s,f,e);if(l)return l}}const a=M(s,r,e);if(a)return a}throw t}},"createTsExtensionResolver"),z="at cjsPreparseModuleExports (node:internal",de=o(s=>{const e=s.stack.split(`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                

Error: Cannot find module './server/routes.js'
Require stack:
- /app/[eval]
    at Module._resolveFilename (node:internal/modules/cjs/loader:1140:15)
    at nextResolveSimple (/app/node_modules/tsx/dist/register-BXA4IaYH.cjs:4:1002)
    at /app/node_modules/tsx/dist/register-BXA4IaYH.cjs:3:2622
    at /app/node_modules/tsx/dist/register-BXA4IaYH.cjs:3:1538
    at resolveTsPaths (/app/node_modules/tsx/dist/register-BXA4IaYH.cjs:4:760)
    at /app/node_modules/tsx/dist/register-BXA4IaYH.cjs:4:1100
    at m._resolveFilename (file:///app/node_modules/tsx/dist/register-DRJeZPTf.mjs:1:789)
    at Module._load (node:internal/modules/cjs/loader:981:27)
    at Module.require (node:internal/modules/cjs/loader:1231:19)
    at require (node:internal/modules/helpers:177:18) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ '/app/[eval]' ]
}

Node.js v18.20.8
root@srv741469:/opt/loan-copilot# docker-compose exec app cat server/routes.ts | head -50
import express, { type Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertUserSchema, insertLoanSchema, insertPropertySchema, insertContactSchema, insertTaskSchema, insertDocumentSchema, insertMessageSchema } from "@shared/schema";
import { z } from "zod";
import { processLoanDocuments, analyzeDriveDocuments } from "./lib/openai";
import { authenticateGoogle, getDriveFiles, scanFolderRecursively, downloadDriveFile } from "./lib/google";
import { getGoogleAuthUrl, handleGoogleCallback, uploadFileToGoogleDriveOAuth, listGoogleDriveFilesOAuth } from "./lib/google-oauth";
import { createFallbackAssistantResponse } from "./lib/fallbackAI";
import session from "express-session";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import MemoryStore from "memorystore";
import multer from "multer";
import path from "path";

const SessionStore = MemoryStore(session);

import fs from "fs";

// Ensure uploads directory exists
const uploadsDir = path.join(process.cwd(), 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Configure multer for file uploads with disk storage
const upload = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, uploadsDir);
    },
    filename: (req, file, cb) => {
      // Create unique filename with timestamp
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      const fileName = `${uniqueSuffix}-${file.originalname}`;
      cb(null, fileName);
    }
  }),
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB limit (matches Express configuration)
  },
  fileFilter: (req, file, cb) => {
    // Allow common file types
    const allowedTypes = /\.(pdf|doc|docx|jpg|jpeg|png|gif|xls|xlsx)$/i;
    if (allowedTypes.test(file.originalname)) {
      cb(null, true);
    } else {
      cb(new Error('Invalid file type. Only PDF, DOC, DOCX, JPG, JPEG, PNG, GIF, XLS, XLSX files are allowed.'));
    }
root@srv741469:/opt/loan-copilot# docker-compose logs app --tail=50 | grep -i error
root@srv741469:/opt/loan-copilot# cat > start-production.js << 'EOF'
> import express from 'express';
> import path from 'path';
> import { fileURLToPath } from 'url';
> import { readFileSync } from 'fs';
> import { Pool } from '@neondatabase/serverless';
> const __filename = fileURLToPath(import.meta.url);
> const __dirname = path.dirname(__filename);
> const app = express();
> const port = process.env.PORT || 5000;
> // Database connection
> const pool = new Pool({
>   connectionString: `postgresql://loanuser:Adlercapital111@postgres:5432/loancopilot`
> });
> // Middleware
> app.use(express.json({ limit: '50mb' }));
> app.use(express.urlencoded({ extended: true }));
> // API Routes
> app.post('/api/auth/login', async (req, res) => {
>   try {
>     const { username, password, email } = req.body;
>     const identifier = username || email;
>
>     console.log('Login attempt:', { identifier, hasPassword: !!password });
>
>     const result = await pool.query(
>       'SELECT * FROM users WHERE username = $1 OR email = $1',
>       [identifier]
>     );
>
>     if (result.rows.length === 0) {
>       return res.status(401).json({ message: 'User not found' });
>     }
>
>     const user = result.rows[0];
>
>     if (user.password !== password) {
>       return res.status(401).json({ message: 'Invalid password' });
>     }
>
>     res.json({
>       message: 'Login successful',
>       user: {
>         id: user.id,
>         username: user.username,
>         email: user.email
>       }
>     });
>   } catch (error) {
>     console.error('Login error:', error);
>     res.status(500).json({ message: 'Server error' });
>   }
> });
> app.get('/api/auth/user', (req, res) => {
>   res.json({ message: 'Not authenticated' });
> });
> app.get('/api/health', (req, res) => {
>   res.json({ status: 'ok', timestamp: new Date().toISOString() });
> });
> // Serve static files
> app.use(express.static(path.join(__dirname, 'dist/public')));
> // Catch all handler
> app.get('*', (req, res) => {
>   const indexPath = path.join(__dirname, 'dist/public/index.html');
>   try {
>     const html = readFileSync(indexPath, 'utf8');
>     res.send(html);
>   } catch (err) {
>     res.status(404).send('App not built properly');
>   }
> });
> app.listen(port, '0.0.0.0', () => {
>   console.log(`Loan Processing Co-Pilot running on port ${port}`);
>   console.log(`Database connection configured`);
> });
> EOF
root@srv741469:/opt/loan-copilot# docker-compose down
[+] Running 3/3
 ✔ Container loan-copilot-app-1       Removed                                                                      0.2s
 ✔ Container loan-copilot-postgres-1  Removed                                                                      0.2s
 ✔ Network loan-copilot_default       Removed                                                                      0.1s
root@srv741469:/opt/loan-copilot# docker-compose up -d --build
[+] Building 53.0s (12/12) FINISHED
 => [app internal] load build definition from Dockerfile                                                           0.0s
 => => transferring dockerfile: 335B                                                                               0.0s
 => [app internal] load metadata for docker.io/library/node:18-alpine                                              1.7s
 => [app internal] load .dockerignore                                                                              0.0s
 => => transferring context: 2B                                                                                    0.0s
 => [app internal] load build context                                                                              1.3s
 => => transferring context: 2.28MB                                                                                1.2s
 => [app 1/7] FROM docker.io/library/node:18-alpine@sha256:8d6421d663b4c28fd3ebc498332f249011d118945588d0a35cb9bc  0.0s
 => CACHED [app 2/7] WORKDIR /app                                                                                  0.0s
 => CACHED [app 3/7] COPY package*.json ./                                                                         0.0s
 => CACHED [app 4/7] RUN npm install                                                                               0.0s
 => [app 5/7] COPY . .                                                                                            22.3s
 => [app 6/7] RUN npm run build                                                                                    7.3s
 => [app 7/7] RUN mkdir -p uploads                                                                                 0.2s
 => [app] exporting to image                                                                                      20.1s
 => => exporting layers                                                                                           20.1s
 => => writing image sha256:0c5b8dc09e86476405e025ae5e3bf72b1b1544012b0b9a242f4b55cf2cccb919                       0.0s
 => => naming to docker.io/library/loan-copilot-app                                                                0.0s
[+] Running 3/3
 ✔ Network loan-copilot_default       Created                                                                      0.1s
 ✔ Container loan-copilot-postgres-1  Started                                                                      0.3s
 ✔ Container loan-copilot-app-1       Started                                                                      0.4s
root@srv741469:/opt/loan-copilot# curl -X POST http://localhost:5000/api/auth/login \
>   -H "Content-Type: application/json" \
>   -d '{"username": "stads98@gmail.com", "password": "password123"}'
{"message":"Server error"}root@srv741469:/opt/loan-copilot#