root@srv741469:/opt/loan-copilot# cat > create-schema.sql << 'EOF'
> -- Create users table
> CREATE TABLE IF NOT EXISTS users (
>     id SERIAL PRIMARY KEY,
>     username VARCHAR(255) UNIQUE NOT NULL,
>     password VARCHAR(255) NOT NULL,
>     email VARCHAR(255),
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create lenders table
> CREATE TABLE IF NOT EXISTS lenders (
>     id SERIAL PRIMARY KEY,
>     name VARCHAR(255) NOT NULL,
>     contact_email VARCHAR(255),
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create loan_types table
> CREATE TABLE IF NOT EXISTS loan_types (
>     id SERIAL PRIMARY KEY,
>     name VARCHAR(255) NOT NULL,
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create properties table
> CREATE TABLE IF NOT EXISTS properties (
>     id SERIAL PRIMARY KEY,
>     address TEXT NOT NULL,
>     property_type VARCHAR(100),
>     estimated_value DECIMAL(15,2),
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create loans table
> CREATE TABLE IF NOT EXISTS loans (
>     id SERIAL PRIMARY KEY,
>     loan_number VARCHAR(255) UNIQUE,
>     borrower_name VARCHAR(255),
>     borrower_entity_name VARCHAR(255),
>     property_address TEXT,
>     property_type VARCHAR(100),
>     estimated_value DECIMAL(15,2),
>     loan_amount VARCHAR(255),
>     loan_to_value INTEGER,
>     loan_type VARCHAR(100),
>     loan_purpose VARCHAR(100),
>     funder VARCHAR(255),
>     status VARCHAR(100) DEFAULT 'in_progress',
>     target_close_date DATE,
>     drive_folder VARCHAR(255),
>     google_drive_folder_id VARCHAR(255),
>     property_id INTEGER REFERENCES properties(id),
>     lender_id INTEGER REFERENCES lenders(id),
>     processor_id INTEGER REFERENCES users(id),
>     completion_percentage INTEGER DEFAULT 0,
>     completed_requirements TEXT[],
>     document_assignments JSONB,
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create documents table
> CREATE TABLE IF NOT EXISTS documents (
>     id SERIAL PRIMARY KEY,
>     loan_id INTEGER REFERENCES loans(id),
>     filename VARCHAR(255),
>     original_filename VARCHAR(255),
>     file_path VARCHAR(500),
>     file_size INTEGER,
>     mime_type VARCHAR(100),
>     document_type VARCHAR(255),
>     upload_date TIMESTAMP DEFAULT NOW(),
>     is_deleted BOOLEAN DEFAULT FALSE,
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create contacts table
> CREATE TABLE IF NOT EXISTS contacts (
>     id SERIAL PRIMARY KEY,
>     loan_id INTEGER REFERENCES loans(id),
,
    phone VARCHAR(50)>     name VARCHAR(255),
>     email VARCHAR(255),
>     phone VARCHAR(50),
>     role VARCHAR(100),
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create tasks table
> CREATE TABLE IF NOT EXISTS tasks (
>     id SERIAL PRIMARY KEY,
>     loan_id INTEGER REFERENCES loans(id),
>     description TEXT,
>     due_date DATE,
>     completed BOOLEAN DEFAULT FALSE,
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create messages table
> CREATE TABLE IF NOT EXISTS messages (
>     id SERIAL PRIMARY KEY,
>     loan_id INTEGER REFERENCES loans(id),
>     content TEXT,
>     sender VARCHAR(255),
>     timestamp TIMESTAMP DEFAULT NOW(),
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Create user_tokens table
> CREATE TABLE IF NOT EXISTS user_tokens (
>     id SERIAL PRIMARY KEY,
>     user_id INTEGER REFERENCES users(id),
>     service VARCHAR(100),
>     access_token TEXT,
>     refresh_token TEXT,
>     expires_at TIMESTAMP,
>     created_at TIMESTAMP DEFAULT NOW(),
>     updated_at TIMESTAMP DEFAULT NOW()
> );
> -- Insert default data
> INSERT INTO lenders (id, name, contact_email) VALUES
> (1, 'Kiavi', 'info@kiavi.com'),
> (2, 'Lima One', 'info@limaone.com'),
> (3, 'RCN Capital', 'info@rcncapital.com')
> ON CONFLICT (id) DO NOTHING;
> INSERT INTO loan_types (id, name) VALUES
> (1, 'DSCR'),
> (2, 'Fix and Flip'),
> (3, 'BRRRR')
> ON CONFLICT (id) DO NOTHING;
> EOF
root@srv741469:/opt/loan-copilot# docker cp create-schema.sql loan-copilot-postgres-1:/create-schema.sql
Successfully copied 5.63kB to loan-copilot-postgres-1:/create-schema.sql
root@srv741469:/opt/loan-copilot# docker-compose exec postgres psql -U loanuser -d loancopilot -f /create-schema.sql
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
INSERT 0 3
INSERT 0 3
root@srv741469:/opt/loan-copilot# docker-compose exec postgres psql -U loanuser -d loancopilot -c "\dt"
            List of relations
 Schema |    Name     | Type  |  Owner
--------+-------------+-------+----------
 public | contacts    | table | loanuser
 public | documents   | table | loanuser
 public | lenders     | table | loanuser
 public | loan_types  | table | loanuser
 public | loans       | table | loanuser
 public | messages    | table | loanuser
 public | properties  | table | loanuser
 public | tasks       | table | loanuser
 public | user_tokens | table | loanuser
 public | users       | table | loanuser
(10 rows)

root@srv741469:/opt/loan-copilot# docker-compose exec postgres psql -U loanuser -d loancopilot -f /auth-setup.sql
INSERT 0 1
root@srv741469:/opt/loan-copilot# curl -X POST http://localhost:5000/api/auth/login \
>   -H "Content-Type: application/json" \
>   -d '{"username": "stads98@gmail.com", "password": "Adlercapital!!!"}'
Bad Requestroot@srv741469:/opt/loan-copilot#